// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Data;
using System.Threading.Tasks;
using School.Entities;

namespace School.Entities
{
    public partial class SchoolContextProcedures
    {
        private readonly SchoolContext _context;

        public SchoolContextProcedures(SchoolContext context)
        {
            _context = context;
        }

        public async Task<int> DeleteOfficeAssignment(int? InstructorID)
        {
            var parameterInstructorID = new SqlParameter
            {
                ParameterName = "InstructorID",
                Precision = 10,
                Size = 4,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = InstructorID,
            };

            return await _context.Database.ExecuteSqlRawAsync("EXEC [dbo].[DeleteOfficeAssignment] @InstructorID  ",parameterInstructorID);
        }

        public async Task<DeletePersonResult[]> DeletePerson(int? PersonId)
        {
            var parameterPersonId = new SqlParameter
            {
                ParameterName = "PersonId",
                Precision = 10,
                Size = 4,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = PersonId,
            };

            var result = await _context.SqlQuery<DeletePersonResult>("EXEC [dbo].[DeletePerson] @PersonId  ",parameterPersonId);

            return result;
        }

        public async Task<getDepartmentCoursesResult[]> getDepartmentCourses()
        {
            var result = await _context.SqlQuery<getDepartmentCoursesResult>("EXEC [dbo].[getDepartmentCourses]");

            return result;
        }

        public async Task<int> GetDepartmentName(int? ID, OutputParameter<string> Name)
        {
            var parameterID = new SqlParameter
            {
                ParameterName = "ID",
                Precision = 10,
                Size = 4,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = ID,
            };

            var parameterName = new SqlParameter
            {
                ParameterName = "Name",
                Precision = 50,
                Size = 100,
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.NVarChar,
                Value = Name,
            };

            return await _context.Database.ExecuteSqlRawAsync("EXEC [dbo].[GetDepartmentName] @ID, @Name OUTPUT ",parameterID,parameterName);
            Name.SetValueInternal(parameterName.Value);
        }

        public async Task<GetStudentGradesResult[]> GetStudentGrades(int? StudentID)
        {
            var parameterStudentID = new SqlParameter
            {
                ParameterName = "StudentID",
                Precision = 10,
                Size = 4,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = StudentID,
            };

            var result = await _context.SqlQuery<GetStudentGradesResult>("EXEC [dbo].[GetStudentGrades] @StudentID  ",parameterStudentID);

            return result;
        }

        public async Task<InsertOfficeAssignmentResult[]> InsertOfficeAssignment(int? InstructorID,string Location)
        {
            var parameterInstructorID = new SqlParameter
            {
                ParameterName = "InstructorID",
                Precision = 10,
                Size = 4,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = InstructorID,
            };

            var parameterLocation = new SqlParameter
            {
                ParameterName = "Location",
                Precision = 50,
                Size = 100,
                SqlDbType = System.Data.SqlDbType.NVarChar,
                Value = Location,
            };

            var result = await _context.SqlQuery<InsertOfficeAssignmentResult>("EXEC [dbo].[InsertOfficeAssignment] @InstructorID,@Location  ",parameterInstructorID,parameterLocation);

            return result;
        }

        public async Task<InsertPersonResult[]> InsertPerson(string LastName,string FirstName,DateTime? HireDate,DateTime? EnrollmentDate)
        {
            var parameterLastName = new SqlParameter
            {
                ParameterName = "LastName",
                Precision = 50,
                Size = 100,
                SqlDbType = System.Data.SqlDbType.NVarChar,
                Value = LastName,
            };

            var parameterFirstName = new SqlParameter
            {
                ParameterName = "FirstName",
                Precision = 50,
                Size = 100,
                SqlDbType = System.Data.SqlDbType.NVarChar,
                Value = FirstName,
            };

            var parameterHireDate = new SqlParameter
            {
                ParameterName = "HireDate",
                Precision = 23,
                Scale = 3,
                Size = 8,
                SqlDbType = System.Data.SqlDbType.DateTime,
                Value = HireDate,
            };

            var parameterEnrollmentDate = new SqlParameter
            {
                ParameterName = "EnrollmentDate",
                Precision = 23,
                Scale = 3,
                Size = 8,
                SqlDbType = System.Data.SqlDbType.DateTime,
                Value = EnrollmentDate,
            };

            var result = await _context.SqlQuery<InsertPersonResult>("EXEC [dbo].[InsertPerson] @LastName,@FirstName,@HireDate,@EnrollmentDate  ",parameterLastName,parameterFirstName,parameterHireDate,parameterEnrollmentDate);

            return result;
        }

        public async Task<int> sp_upgraddiagrams()
        {
            return await _context.Database.ExecuteSqlRawAsync("EXEC [dbo].[sp_upgraddiagrams]");
        }

        public async Task<UpdateOfficeAssignmentResult[]> UpdateOfficeAssignment(int? InstructorID,string Location,byte[] OrigTimestamp)
        {
            var parameterInstructorID = new SqlParameter
            {
                ParameterName = "InstructorID",
                Precision = 10,
                Size = 4,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = InstructorID,
            };

            var parameterLocation = new SqlParameter
            {
                ParameterName = "Location",
                Precision = 50,
                Size = 100,
                SqlDbType = System.Data.SqlDbType.NVarChar,
                Value = Location,
            };

            var parameterOrigTimestamp = new SqlParameter
            {
                ParameterName = "OrigTimestamp",
                Precision = 8,
                Size = 8,
                SqlDbType = System.Data.SqlDbType.Timestamp,
                Value = OrigTimestamp,
            };

            var result = await _context.SqlQuery<UpdateOfficeAssignmentResult>("EXEC [dbo].[UpdateOfficeAssignment] @InstructorID,@Location,@OrigTimestamp  ",parameterInstructorID,parameterLocation,parameterOrigTimestamp);

            return result;
        }

        public async Task<int> UpdatePerson(int? PersonID,string LastName,string FirstName,DateTime? HireDate,DateTime? EnrollmentDate)
        {
            var parameterPersonID = new SqlParameter
            {
                ParameterName = "PersonID",
                Precision = 10,
                Size = 4,
                SqlDbType = System.Data.SqlDbType.Int,
                Value = PersonID,
            };

            var parameterLastName = new SqlParameter
            {
                ParameterName = "LastName",
                Precision = 50,
                Size = 100,
                SqlDbType = System.Data.SqlDbType.NVarChar,
                Value = LastName,
            };

            var parameterFirstName = new SqlParameter
            {
                ParameterName = "FirstName",
                Precision = 50,
                Size = 100,
                SqlDbType = System.Data.SqlDbType.NVarChar,
                Value = FirstName,
            };

            var parameterHireDate = new SqlParameter
            {
                ParameterName = "HireDate",
                Precision = 23,
                Scale = 3,
                Size = 8,
                SqlDbType = System.Data.SqlDbType.DateTime,
                Value = HireDate,
            };

            var parameterEnrollmentDate = new SqlParameter
            {
                ParameterName = "EnrollmentDate",
                Precision = 23,
                Scale = 3,
                Size = 8,
                SqlDbType = System.Data.SqlDbType.DateTime,
                Value = EnrollmentDate,
            };

            return await _context.Database.ExecuteSqlRawAsync("EXEC [dbo].[UpdatePerson] @PersonID,@LastName,@FirstName,@HireDate,@EnrollmentDate  ",parameterPersonID,parameterLastName,parameterFirstName,parameterHireDate,parameterEnrollmentDate);
        }
    }
}
